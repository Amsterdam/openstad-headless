name: Build and Publish Docker Image
on:
  push:
    paths-ignore:
      - 'operations/deployments/openstad-headless/environments/acc/images.yml'
      - 'operations/deployments/openstad-headless/environments/prod/images.yml'
    branches:
      - '**'
    tags:
      - "v*"
jobs:
  unit-test:
    name: Run unit tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm i

      - name: Run Vitest tests
        run: npm run test:unit

#  build-builder-stage:
#    name: Build `builder` stage
#    runs-on: ubuntu-latest
#    needs: unit-test
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Restore cache
#        uses: actions/cache@v3
#        with:
#          path: /tmp/.buildx-cache
#          key: docker-base-${{ github.sha }}
#          restore-keys: |
#            docker-base-
#
#      - name: Build base stage
#        run: |
#          docker buildx build \
#            --target=builder \
#            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
#            --cache-from=type=local,src=/tmp/.buildx-cache \
#            --load \
#            -t builder-stage:latest \
#            .
#  # define job to build and publish docker image
#  build-and-push-docker-image:
#    needs: build-builder-stage
#    permissions:
#      contents: read
#      packages: write
#    strategy:
#      matrix:
#        app: [admin-server, api-server, auth-server, image-server, cms-server]
#        include:
#          - app: api-server
#            build-target: release-with-packages
#    name: '[${{ matrix.app }}] Build & push image'
#    runs-on: ubuntu-latest
#    outputs:
#      image_tag: ${{ steps.image_output.outputs.image_tag }}
#    env:
#      IMAGE: '${{ github.repository_owner }}/${{ matrix.app }}'
#      APP: ${{ matrix.app }}
#      BUILD_TARGET: release
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Restore base build cache
#        uses: actions/cache@v3
#        with:
#          path: /tmp/.buildx-cache
#          key: docker-base-${{ github.sha }}
#          restore-keys: |
#            docker-base-
#
#      - if: ${{ matrix.build-target }}
#        name: Set correct build target
#        run: echo "BUILD_TARGET=${{ matrix.build-target}}" >> $GITHUB_ENV
#
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.IMAGE }}
#          tags: |
#            # branch event
#            type=ref,event=branch,suffix=-{{sha}}
#            # tag event
#            type=ref,event=tag
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Build image and push to GitHub Container Registry
#        id: docker_build
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          push: true
#          tags: 'ghcr.io/${{ steps.meta.outputs.tags }}'
#          build-args: |
#            APP=${{ matrix.app }}
#          cache-from: type=local,src=/tmp/.buildx-cache
#      - name: Add image output
#        id: image_output
#        run: echo "image_tag=${{ steps.meta.outputs.version }}" >> "$GITHUB_OUTPUT"

  e2e-test:
    name: Run E2E tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load .testing.env into environment
        run: |
          set -a
          source .testing.env
          set +a
          printenv > $GITHUB_ENV

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Cypress
        run: npm install cypress

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Add release version to .testing.env
        #run: echo "RELEASE_VERSION=${{ needs.build-and-push-docker-image.outputs.image_tag }}" >> .testing.env
        run: echo "RELEASE_VERSION=feat-e2e-test-7a764a6" >> .testing.env

      - name: Generate Auth certs
        working-directory: ./apps/auth-server
        run: |
          mkdir -p ./certs
      
          openssl genrsa -out ./certs/privatekey.pem 2048
          chmod 644 ./certs/privatekey.pem
      
          openssl req -new -key ./certs/privatekey.pem -out ./certs/certrequest.csr -subj "/C=NL/ST=All/L=Amsterdam/O=openstad/CN=www.openstad.org"
          chmod 644 ./certs/certrequest.csr
      
          openssl x509 -req -in ./certs/certrequest.csr -signkey ./certs/privatekey.pem -days 3650 -out ./certs/certificate.pem
          chmod 644 ./certs/certificate.pem
      
          ls -l ./certs

      - name: Start API & Auth in init mode with docker compose
        run: docker compose -f docker-compose.e2e.init.yml --env-file .testing.env up -d

#      - name: Start Auth service with docker compose
#        run: docker compose -f docker-compose.e2e.yml --env-file .testing.env up openstad-auth-server -d
#
      - name: Initialize Auth database
        run: docker compose -f docker-compose.e2e.init.yml --env-file .testing.env exec openstad-auth-server bash -c "NODE_ENV=development npm run init-database -w apps/auth-server -- --force && NODE_ENV=development npm run migrate-database -w apps/auth-server"

      - name: Migrate Auth database
        run: docker compose -f docker-compose.e2e.init.yml --env-file .testing.env exec openstad-auth-server bash -c "NODE_ENV=development npm run migrate-database -w apps/auth-server"

      - name: Start API service with docker compose
        run: docker compose -f docker-compose.e2e.init.yml --env-file .testing.env up openstad-api-server -d

      - name: Initialize Api database
        run: docker compose -f docker-compose.e2e.init.yml --env-file .testing.env exec openstad-api-server bash -c "NODE_ENV=development npm run init-database -w apps/api-server -- --only-if-empty && NODE_ENV=development npm run migrate-database -w apps/api-server"

      - name: Shut down initialization services
        run: docker compose -f docker-compose.e2e.init.yml --env-file .testing.env down

      - name: Start all services with docker compose
        run: docker compose -f docker-compose.e2e.yml --env-file .testing.env up -d

#      - name: Show logs from Docker-compose
#        run: docker compose -f docker-compose.e2e.yml --env-file .testing.env logs

      #      - name: Wait for services to be ready
      #        run: |
      #          export $(grep -v '^#' .testing.env | xargs)
      #          npx wait-on $ADMIN_URL $API_URL $CMS_URL $AUTH_URL $IMAGE_URL --timeout=60000 --interval=5000

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          record: true
          install: false
          wait-on: '${{env.ADMIN_URL}}/health,${{env.API_URL}}/health,${{env.CMS_URL}}/health,${{env.AUTH_APP_URL}}/health,${{env.IMAGE_APP_URL}}/health'
          wait-on-timeout: 180
        env:
            CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop docker compose
        if: always()
        run: docker compose --env-file .testing.env down

#  set-images-in-yaml-and-commit:
#    name: Set images in yaml and commit
#    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && (needs.e2e-test.result == 'success' || needs.e2e-test.result == 'skipped')
#    runs-on: ubuntu-latest
#    needs: [e2e-test, build-and-push-docker-image]
#
#    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#    defaults:
#      run:
#        shell: bash
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          persist-credentials: false
#
#      - name: Install yq
#        run: sudo snap install yq --channel=v4/stable
#
#      - name: "[PROD] Set images and commit"
#        if: github.ref == 'refs/heads/main'
#        run: |
#          git config --global user.email github@ci.push && \
#          git config --global user.name "Github action" && \
#          git remote set-url origin https://${{ secrets.GH_COMMIT_PAT }}@github.com/${{ github.repository }}.git && \
#          /snap/bin/yq -i '.admin.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/admin-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/prod/images.yml && \
#          /snap/bin/yq -i '.api.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/api-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/prod/images.yml && \
#          /snap/bin/yq -i '.cms.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/cms-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/prod/images.yml && \
#          /snap/bin/yq -i '.auth.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/auth-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/prod/images.yml && \
#          /snap/bin/yq -i '.image.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/image-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/prod/images.yml && \
#          git add operations/deployments/openstad-headless/environments/prod/images.yml && \
#          git commit -m "ci: prod release ${{ needs.build-and-push-docker-image.outputs.image_tag }}" && \
#          git push origin main
#
#      - name: "[ACC] Set images and commit"
#        if: github.ref == 'refs/heads/develop'
#        run: |
#          git config --global user.email github@ci.push && \
#          git config --global user.name "Github action" && \
#          git remote set-url origin https://${{ secrets.GH_COMMIT_PAT }}@github.com/${{ github.repository }}.git && \
#          /snap/bin/yq -i '.admin.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/admin-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/acc/images.yml && \
#          /snap/bin/yq -i '.api.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/api-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/acc/images.yml && \
#          /snap/bin/yq -i '.cms.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/cms-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/acc/images.yml && \
#          /snap/bin/yq -i '.auth.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/auth-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/acc/images.yml && \
#          /snap/bin/yq -i '.image.deploymentContainer.image = "ghcr.io/${{ github.repository_owner }}/image-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}"' ./operations/deployments/openstad-headless/environments/acc/images.yml && \
#          git add operations/deployments/openstad-headless/environments/acc/images.yml && \
#          git commit -m "ci: acc release ${{ needs.build-and-push-docker-image.outputs.image_tag }}" && \
#          git push origin develop
#
#      - name: Display images in Github Action
#        run: |
#          echo "**New images 🐳**
#
#          | App | Image |
#          |---|---|
#          | admin-server | \`ghcr.io/${{ github.repository_owner}}/admin-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}\` |
#          | api-server | \`ghcr.io/${{ github.repository_owner}}/api-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}\` |
#          | cms-server | \`ghcr.io/${{ github.repository_owner}}/cms-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}\` |
#          | auth-server | \`ghcr.io/${{ github.repository_owner}}/auth-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}\` |
#          | image-server | \`ghcr.io/${{ github.repository_owner}}/image-server:${{ needs.build-and-push-docker-image.outputs.image_tag }}\` |" >> $GITHUB_STEP_SUMMARY
